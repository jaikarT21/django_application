pipeline {
    agent any

    environment {
        registryCredentials = 'ecr:us-east-1:awscreds'
        appRegistryName = '302263057737.dkr.ecr.us-east-1.amazonaws.com/djangoimg'
        djangoimgRegistry = '302263057737.dkr.ecr.us-east-1.amazonaws.com'
        cluster = "django-cluster"
        service = "djangosvc"
    }

    stages {
        stage("Fetch the Code") {
            steps {
                git branch: 'main',
                    credentialsId: 'githubid',
                    url: 'https://github.com/jaikarT21/django_application.git'
            }
        }

        stage("Build the Image") {
            steps {
                script {
                    dockerImage = docker.build("${appRegistryName}:$BUILD_NUMBER", ".")
                }
            }
        }

        stage("Push the Image to ECR") {
            steps {
                script {
                    withDockerRegistry([credentialsId: registryCredentials, url: "https://${djangoimgRegistry}"]) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push("latest")
                    }
                }
            }
        }

        stage("Remove Local Docker Images") {
            steps {
                sh 'docker rmi -f $(docker images -q) || true'
            }
        }

        stage('Deploy to AWS ECS') {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-east-1') {
                    sh '''
                        set -e
                        echo "üöÄ Updating ECS Service..."
                        aws ecs update-service --cluster "$cluster" --service "$service" --force-new-deployment
                        
                        echo "‚è≥ Waiting for deployment to complete..."
                        aws ecs wait services-stable --cluster "$cluster" --services "$service"
                        echo "‚úÖ Deployment successful!"
                    '''
                }
            }
        }
    }
}
